// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: plugin/proto/server.proto

package golang

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Requests
type KubernetesContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MemoryRequest float64 `protobuf:"fixed64,2,opt,name=memory_request,json=memoryRequest,proto3" json:"memory_request,omitempty"`
	MemoryLimit   float64 `protobuf:"fixed64,3,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	CpuRequest    float64 `protobuf:"fixed64,4,opt,name=cpu_request,json=cpuRequest,proto3" json:"cpu_request,omitempty"`
	CpuLimit      float64 `protobuf:"fixed64,5,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,omitempty"`
}

func (x *KubernetesContainer) Reset() {
	*x = KubernetesContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesContainer) ProtoMessage() {}

func (x *KubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesContainer.ProtoReflect.Descriptor instead.
func (*KubernetesContainer) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesContainer) GetMemoryRequest() float64 {
	if x != nil {
		return x.MemoryRequest
	}
	return 0
}

func (x *KubernetesContainer) GetMemoryLimit() float64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *KubernetesContainer) GetCpuRequest() float64 {
	if x != nil {
		return x.CpuRequest
	}
	return 0
}

func (x *KubernetesContainer) GetCpuLimit() float64 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

type KubernetesPod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Containers   []*KubernetesContainer `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty"`
	Affinity     *v1.Affinity           `protobuf:"bytes,5,opt,name=affinity,proto3" json:"affinity,omitempty"`
	NodeSelector map[string]string      `protobuf:"bytes,6,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations  []*v1.Toleration       `protobuf:"bytes,7,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OwnerKind    []string               `protobuf:"bytes,9,rep,name=owner_kind,json=ownerKind,proto3" json:"owner_kind,omitempty"`
}

func (x *KubernetesPod) Reset() {
	*x = KubernetesPod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesPod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesPod) ProtoMessage() {}

func (x *KubernetesPod) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesPod.ProtoReflect.Descriptor instead.
func (*KubernetesPod) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesPod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KubernetesPod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesPod) GetContainers() []*KubernetesContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *KubernetesPod) GetAffinity() *v1.Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *KubernetesPod) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *KubernetesPod) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *KubernetesPod) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *KubernetesPod) GetOwnerKind() []string {
	if x != nil {
		return x.OwnerKind
	}
	return nil
}

type KubernetesDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Containers   []*KubernetesContainer `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty"`
	Replicas     int32                  `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Affinity     *v1.Affinity           `protobuf:"bytes,5,opt,name=affinity,proto3" json:"affinity,omitempty"`
	NodeSelector map[string]string      `protobuf:"bytes,6,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations  []*v1.Toleration       `protobuf:"bytes,7,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesDeployment) Reset() {
	*x = KubernetesDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDeployment) ProtoMessage() {}

func (x *KubernetesDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDeployment.ProtoReflect.Descriptor instead.
func (*KubernetesDeployment) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{2}
}

func (x *KubernetesDeployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KubernetesDeployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesDeployment) GetContainers() []*KubernetesContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *KubernetesDeployment) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *KubernetesDeployment) GetAffinity() *v1.Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *KubernetesDeployment) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *KubernetesDeployment) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *KubernetesDeployment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type KubernetesStatefulset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Containers   []*KubernetesContainer `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty"`
	Replicas     int32                  `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Affinity     *v1.Affinity           `protobuf:"bytes,5,opt,name=affinity,proto3" json:"affinity,omitempty"`
	NodeSelector map[string]string      `protobuf:"bytes,6,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations  []*v1.Toleration       `protobuf:"bytes,7,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesStatefulset) Reset() {
	*x = KubernetesStatefulset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesStatefulset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesStatefulset) ProtoMessage() {}

func (x *KubernetesStatefulset) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesStatefulset.ProtoReflect.Descriptor instead.
func (*KubernetesStatefulset) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{3}
}

func (x *KubernetesStatefulset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KubernetesStatefulset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesStatefulset) GetContainers() []*KubernetesContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *KubernetesStatefulset) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *KubernetesStatefulset) GetAffinity() *v1.Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *KubernetesStatefulset) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *KubernetesStatefulset) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *KubernetesStatefulset) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type KubernetesDaemonset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Containers   []*KubernetesContainer `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty"`
	Affinity     *v1.Affinity           `protobuf:"bytes,5,opt,name=affinity,proto3" json:"affinity,omitempty"`
	NodeSelector map[string]string      `protobuf:"bytes,6,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations  []*v1.Toleration       `protobuf:"bytes,7,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesDaemonset) Reset() {
	*x = KubernetesDaemonset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDaemonset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDaemonset) ProtoMessage() {}

func (x *KubernetesDaemonset) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDaemonset.ProtoReflect.Descriptor instead.
func (*KubernetesDaemonset) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{4}
}

func (x *KubernetesDaemonset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KubernetesDaemonset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesDaemonset) GetContainers() []*KubernetesContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *KubernetesDaemonset) GetAffinity() *v1.Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *KubernetesDaemonset) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *KubernetesDaemonset) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *KubernetesDaemonset) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type KubernetesJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Containers   []*KubernetesContainer `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty"`
	Completions  int32                  `protobuf:"varint,4,opt,name=completions,proto3" json:"completions,omitempty"`
	Affinity     *v1.Affinity           `protobuf:"bytes,5,opt,name=affinity,proto3" json:"affinity,omitempty"`
	NodeSelector map[string]string      `protobuf:"bytes,6,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations  []*v1.Toleration       `protobuf:"bytes,7,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesJob) Reset() {
	*x = KubernetesJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesJob) ProtoMessage() {}

func (x *KubernetesJob) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesJob.ProtoReflect.Descriptor instead.
func (*KubernetesJob) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{5}
}

func (x *KubernetesJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KubernetesJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesJob) GetContainers() []*KubernetesContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *KubernetesJob) GetCompletions() int32 {
	if x != nil {
		return x.Completions
	}
	return 0
}

func (x *KubernetesJob) GetAffinity() *v1.Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *KubernetesJob) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *KubernetesJob) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *KubernetesJob) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type NodeSystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineID               string `protobuf:"bytes,1,opt,name=machineID,proto3" json:"machineID,omitempty"`
	SystemUUID              string `protobuf:"bytes,2,opt,name=systemUUID,proto3" json:"systemUUID,omitempty"`
	BootID                  string `protobuf:"bytes,3,opt,name=bootID,proto3" json:"bootID,omitempty"`
	KernelVersion           string `protobuf:"bytes,4,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	OsImage                 string `protobuf:"bytes,5,opt,name=osImage,proto3" json:"osImage,omitempty"`
	ContainerRuntimeVersion string `protobuf:"bytes,6,opt,name=containerRuntimeVersion,proto3" json:"containerRuntimeVersion,omitempty"`
	KubeletVersion          string `protobuf:"bytes,7,opt,name=kubeletVersion,proto3" json:"kubeletVersion,omitempty"`
	KubeProxyVersion        string `protobuf:"bytes,8,opt,name=kubeProxyVersion,proto3" json:"kubeProxyVersion,omitempty"`
	OperatingSystem         string `protobuf:"bytes,9,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`
	Architecture            string `protobuf:"bytes,10,opt,name=architecture,proto3" json:"architecture,omitempty"`
}

func (x *NodeSystemInfo) Reset() {
	*x = NodeSystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSystemInfo) ProtoMessage() {}

func (x *NodeSystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSystemInfo.ProtoReflect.Descriptor instead.
func (*NodeSystemInfo) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{6}
}

func (x *NodeSystemInfo) GetMachineID() string {
	if x != nil {
		return x.MachineID
	}
	return ""
}

func (x *NodeSystemInfo) GetSystemUUID() string {
	if x != nil {
		return x.SystemUUID
	}
	return ""
}

func (x *NodeSystemInfo) GetBootID() string {
	if x != nil {
		return x.BootID
	}
	return ""
}

func (x *NodeSystemInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *NodeSystemInfo) GetOsImage() string {
	if x != nil {
		return x.OsImage
	}
	return ""
}

func (x *NodeSystemInfo) GetContainerRuntimeVersion() string {
	if x != nil {
		return x.ContainerRuntimeVersion
	}
	return ""
}

func (x *NodeSystemInfo) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *NodeSystemInfo) GetKubeProxyVersion() string {
	if x != nil {
		return x.KubeProxyVersion
	}
	return ""
}

func (x *NodeSystemInfo) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *NodeSystemInfo) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

type KubernetesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Capacity       map[string]int64  `protobuf:"bytes,5,rep,name=capacity,proto3" json:"capacity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NodeSystemInfo *NodeSystemInfo   `protobuf:"bytes,6,opt,name=node_system_info,json=nodeSystemInfo,proto3" json:"node_system_info,omitempty"`
	Taints         []*v1.Taint       `protobuf:"bytes,7,rep,name=taints,proto3" json:"taints,omitempty"`
	MaxPodCount    int64             `protobuf:"varint,8,opt,name=max_pod_count,json=maxPodCount,proto3" json:"max_pod_count,omitempty"`
}

func (x *KubernetesNode) Reset() {
	*x = KubernetesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNode) ProtoMessage() {}

func (x *KubernetesNode) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNode.ProtoReflect.Descriptor instead.
func (*KubernetesNode) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{7}
}

func (x *KubernetesNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KubernetesNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesNode) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *KubernetesNode) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *KubernetesNode) GetCapacity() map[string]int64 {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *KubernetesNode) GetNodeSystemInfo() *NodeSystemInfo {
	if x != nil {
		return x.NodeSystemInfo
	}
	return nil
}

func (x *KubernetesNode) GetTaints() []*v1.Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *KubernetesNode) GetMaxPodCount() int64 {
	if x != nil {
		return x.MaxPodCount
	}
	return 0
}

type KubernetesPodMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics map[string]*KubernetesContainerMetrics `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesPodMetrics) Reset() {
	*x = KubernetesPodMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesPodMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesPodMetrics) ProtoMessage() {}

func (x *KubernetesPodMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesPodMetrics.ProtoReflect.Descriptor instead.
func (*KubernetesPodMetrics) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{8}
}

func (x *KubernetesPodMetrics) GetMetrics() map[string]*KubernetesContainerMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type KubernetesContainerMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    map[string]float64 `protobuf:"bytes,1,rep,name=cpu,proto3" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Memory map[string]float64 `protobuf:"bytes,2,rep,name=memory,proto3" json:"memory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *KubernetesContainerMetrics) Reset() {
	*x = KubernetesContainerMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesContainerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesContainerMetrics) ProtoMessage() {}

func (x *KubernetesContainerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesContainerMetrics.ProtoReflect.Descriptor instead.
func (*KubernetesContainerMetrics) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{9}
}

func (x *KubernetesContainerMetrics) GetCpu() map[string]float64 {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *KubernetesContainerMetrics) GetMemory() map[string]float64 {
	if x != nil {
		return x.Memory
	}
	return nil
}

type KubernetesPodOptimizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      *wrappers.StringValue                  `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CliVersion     *wrappers.StringValue                  `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	Identification map[string]string                      `protobuf:"bytes,3,rep,name=identification,proto3" json:"identification,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Pod            *KubernetesPod                         `protobuf:"bytes,4,opt,name=pod,proto3" json:"pod,omitempty"`
	Namespace      string                                 `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Preferences    map[string]*wrappers.StringValue       `protobuf:"bytes,6,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metrics        map[string]*KubernetesContainerMetrics `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loading        bool                                   `protobuf:"varint,8,opt,name=loading,proto3" json:"loading,omitempty"`
}

func (x *KubernetesPodOptimizationRequest) Reset() {
	*x = KubernetesPodOptimizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesPodOptimizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesPodOptimizationRequest) ProtoMessage() {}

func (x *KubernetesPodOptimizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesPodOptimizationRequest.ProtoReflect.Descriptor instead.
func (*KubernetesPodOptimizationRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{10}
}

func (x *KubernetesPodOptimizationRequest) GetRequestId() *wrappers.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *KubernetesPodOptimizationRequest) GetCliVersion() *wrappers.StringValue {
	if x != nil {
		return x.CliVersion
	}
	return nil
}

func (x *KubernetesPodOptimizationRequest) GetIdentification() map[string]string {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *KubernetesPodOptimizationRequest) GetPod() *KubernetesPod {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *KubernetesPodOptimizationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubernetesPodOptimizationRequest) GetPreferences() map[string]*wrappers.StringValue {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *KubernetesPodOptimizationRequest) GetMetrics() map[string]*KubernetesContainerMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *KubernetesPodOptimizationRequest) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

type KubernetesDeploymentOptimizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      *wrappers.StringValue            `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CliVersion     *wrappers.StringValue            `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	Identification map[string]string                `protobuf:"bytes,3,rep,name=identification,proto3" json:"identification,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Deployment     *KubernetesDeployment            `protobuf:"bytes,4,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Namespace      string                           `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Preferences    map[string]*wrappers.StringValue `protobuf:"bytes,6,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metrics        map[string]*KubernetesPodMetrics `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loading        bool                             `protobuf:"varint,8,opt,name=loading,proto3" json:"loading,omitempty"`
}

func (x *KubernetesDeploymentOptimizationRequest) Reset() {
	*x = KubernetesDeploymentOptimizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDeploymentOptimizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDeploymentOptimizationRequest) ProtoMessage() {}

func (x *KubernetesDeploymentOptimizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDeploymentOptimizationRequest.ProtoReflect.Descriptor instead.
func (*KubernetesDeploymentOptimizationRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{11}
}

func (x *KubernetesDeploymentOptimizationRequest) GetRequestId() *wrappers.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *KubernetesDeploymentOptimizationRequest) GetCliVersion() *wrappers.StringValue {
	if x != nil {
		return x.CliVersion
	}
	return nil
}

func (x *KubernetesDeploymentOptimizationRequest) GetIdentification() map[string]string {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *KubernetesDeploymentOptimizationRequest) GetDeployment() *KubernetesDeployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *KubernetesDeploymentOptimizationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubernetesDeploymentOptimizationRequest) GetPreferences() map[string]*wrappers.StringValue {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *KubernetesDeploymentOptimizationRequest) GetMetrics() map[string]*KubernetesPodMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *KubernetesDeploymentOptimizationRequest) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

type KubernetesStatefulsetOptimizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      *wrappers.StringValue            `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CliVersion     *wrappers.StringValue            `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	Identification map[string]string                `protobuf:"bytes,3,rep,name=identification,proto3" json:"identification,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Statefulset    *KubernetesStatefulset           `protobuf:"bytes,4,opt,name=statefulset,proto3" json:"statefulset,omitempty"`
	Namespace      string                           `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Preferences    map[string]*wrappers.StringValue `protobuf:"bytes,6,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metrics        map[string]*KubernetesPodMetrics `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loading        bool                             `protobuf:"varint,8,opt,name=loading,proto3" json:"loading,omitempty"`
}

func (x *KubernetesStatefulsetOptimizationRequest) Reset() {
	*x = KubernetesStatefulsetOptimizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesStatefulsetOptimizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesStatefulsetOptimizationRequest) ProtoMessage() {}

func (x *KubernetesStatefulsetOptimizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesStatefulsetOptimizationRequest.ProtoReflect.Descriptor instead.
func (*KubernetesStatefulsetOptimizationRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{12}
}

func (x *KubernetesStatefulsetOptimizationRequest) GetRequestId() *wrappers.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *KubernetesStatefulsetOptimizationRequest) GetCliVersion() *wrappers.StringValue {
	if x != nil {
		return x.CliVersion
	}
	return nil
}

func (x *KubernetesStatefulsetOptimizationRequest) GetIdentification() map[string]string {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *KubernetesStatefulsetOptimizationRequest) GetStatefulset() *KubernetesStatefulset {
	if x != nil {
		return x.Statefulset
	}
	return nil
}

func (x *KubernetesStatefulsetOptimizationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubernetesStatefulsetOptimizationRequest) GetPreferences() map[string]*wrappers.StringValue {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *KubernetesStatefulsetOptimizationRequest) GetMetrics() map[string]*KubernetesPodMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *KubernetesStatefulsetOptimizationRequest) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

type KubernetesDaemonsetOptimizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      *wrappers.StringValue            `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CliVersion     *wrappers.StringValue            `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	Identification map[string]string                `protobuf:"bytes,3,rep,name=identification,proto3" json:"identification,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Daemonset      *KubernetesDaemonset             `protobuf:"bytes,4,opt,name=daemonset,proto3" json:"daemonset,omitempty"`
	Namespace      string                           `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Preferences    map[string]*wrappers.StringValue `protobuf:"bytes,6,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metrics        map[string]*KubernetesPodMetrics `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loading        bool                             `protobuf:"varint,8,opt,name=loading,proto3" json:"loading,omitempty"`
}

func (x *KubernetesDaemonsetOptimizationRequest) Reset() {
	*x = KubernetesDaemonsetOptimizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDaemonsetOptimizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDaemonsetOptimizationRequest) ProtoMessage() {}

func (x *KubernetesDaemonsetOptimizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDaemonsetOptimizationRequest.ProtoReflect.Descriptor instead.
func (*KubernetesDaemonsetOptimizationRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{13}
}

func (x *KubernetesDaemonsetOptimizationRequest) GetRequestId() *wrappers.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *KubernetesDaemonsetOptimizationRequest) GetCliVersion() *wrappers.StringValue {
	if x != nil {
		return x.CliVersion
	}
	return nil
}

func (x *KubernetesDaemonsetOptimizationRequest) GetIdentification() map[string]string {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *KubernetesDaemonsetOptimizationRequest) GetDaemonset() *KubernetesDaemonset {
	if x != nil {
		return x.Daemonset
	}
	return nil
}

func (x *KubernetesDaemonsetOptimizationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubernetesDaemonsetOptimizationRequest) GetPreferences() map[string]*wrappers.StringValue {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *KubernetesDaemonsetOptimizationRequest) GetMetrics() map[string]*KubernetesPodMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *KubernetesDaemonsetOptimizationRequest) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

type KubernetesJobOptimizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      *wrappers.StringValue            `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CliVersion     *wrappers.StringValue            `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	Identification map[string]string                `protobuf:"bytes,3,rep,name=identification,proto3" json:"identification,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Job            *KubernetesJob                   `protobuf:"bytes,4,opt,name=job,proto3" json:"job,omitempty"`
	Namespace      string                           `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Preferences    map[string]*wrappers.StringValue `protobuf:"bytes,6,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metrics        map[string]*KubernetesPodMetrics `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loading        bool                             `protobuf:"varint,8,opt,name=loading,proto3" json:"loading,omitempty"`
}

func (x *KubernetesJobOptimizationRequest) Reset() {
	*x = KubernetesJobOptimizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesJobOptimizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesJobOptimizationRequest) ProtoMessage() {}

func (x *KubernetesJobOptimizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesJobOptimizationRequest.ProtoReflect.Descriptor instead.
func (*KubernetesJobOptimizationRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{14}
}

func (x *KubernetesJobOptimizationRequest) GetRequestId() *wrappers.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *KubernetesJobOptimizationRequest) GetCliVersion() *wrappers.StringValue {
	if x != nil {
		return x.CliVersion
	}
	return nil
}

func (x *KubernetesJobOptimizationRequest) GetIdentification() map[string]string {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *KubernetesJobOptimizationRequest) GetJob() *KubernetesJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *KubernetesJobOptimizationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubernetesJobOptimizationRequest) GetPreferences() map[string]*wrappers.StringValue {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *KubernetesJobOptimizationRequest) GetMetrics() map[string]*KubernetesPodMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *KubernetesJobOptimizationRequest) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

type KubernetesNodeGetCostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      *wrappers.StringValue `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CliVersion     *wrappers.StringValue `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	Identification map[string]string     `protobuf:"bytes,3,rep,name=identification,proto3" json:"identification,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Node           *KubernetesNode       `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *KubernetesNodeGetCostRequest) Reset() {
	*x = KubernetesNodeGetCostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesNodeGetCostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodeGetCostRequest) ProtoMessage() {}

func (x *KubernetesNodeGetCostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodeGetCostRequest.ProtoReflect.Descriptor instead.
func (*KubernetesNodeGetCostRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{15}
}

func (x *KubernetesNodeGetCostRequest) GetRequestId() *wrappers.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *KubernetesNodeGetCostRequest) GetCliVersion() *wrappers.StringValue {
	if x != nil {
		return x.CliVersion
	}
	return nil
}

func (x *KubernetesNodeGetCostRequest) GetIdentification() map[string]string {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *KubernetesNodeGetCostRequest) GetNode() *KubernetesNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Responses
type RightsizingKubernetesContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MemoryRequest float64 `protobuf:"fixed64,2,opt,name=memory_request,json=memoryRequest,proto3" json:"memory_request,omitempty"`
	MemoryLimit   float64 `protobuf:"fixed64,3,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	CpuRequest    float64 `protobuf:"fixed64,4,opt,name=cpu_request,json=cpuRequest,proto3" json:"cpu_request,omitempty"`
	CpuLimit      float64 `protobuf:"fixed64,5,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,omitempty"`
}

func (x *RightsizingKubernetesContainer) Reset() {
	*x = RightsizingKubernetesContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightsizingKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightsizingKubernetesContainer) ProtoMessage() {}

func (x *RightsizingKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightsizingKubernetesContainer.ProtoReflect.Descriptor instead.
func (*RightsizingKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{16}
}

func (x *RightsizingKubernetesContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RightsizingKubernetesContainer) GetMemoryRequest() float64 {
	if x != nil {
		return x.MemoryRequest
	}
	return 0
}

func (x *RightsizingKubernetesContainer) GetMemoryLimit() float64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *RightsizingKubernetesContainer) GetCpuRequest() float64 {
	if x != nil {
		return x.CpuRequest
	}
	return 0
}

func (x *RightsizingKubernetesContainer) GetCpuLimit() float64 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

type KubernetesContainerRightsizingRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Current           *RightsizingKubernetesContainer `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	Recommended       *RightsizingKubernetesContainer `protobuf:"bytes,3,opt,name=recommended,proto3" json:"recommended,omitempty"`
	MemoryTrimmedMean *wrappers.DoubleValue           `protobuf:"bytes,4,opt,name=memory_trimmed_mean,json=memoryTrimmedMean,proto3" json:"memory_trimmed_mean,omitempty"`
	MemoryMax         *wrappers.DoubleValue           `protobuf:"bytes,5,opt,name=memory_max,json=memoryMax,proto3" json:"memory_max,omitempty"`
	CpuTrimmedMean    *wrappers.DoubleValue           `protobuf:"bytes,6,opt,name=cpu_trimmed_mean,json=cpuTrimmedMean,proto3" json:"cpu_trimmed_mean,omitempty"`
	CpuMax            *wrappers.DoubleValue           `protobuf:"bytes,7,opt,name=cpu_max,json=cpuMax,proto3" json:"cpu_max,omitempty"`
	Description       string                          `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *KubernetesContainerRightsizingRecommendation) Reset() {
	*x = KubernetesContainerRightsizingRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesContainerRightsizingRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesContainerRightsizingRecommendation) ProtoMessage() {}

func (x *KubernetesContainerRightsizingRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesContainerRightsizingRecommendation.ProtoReflect.Descriptor instead.
func (*KubernetesContainerRightsizingRecommendation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{17}
}

func (x *KubernetesContainerRightsizingRecommendation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesContainerRightsizingRecommendation) GetCurrent() *RightsizingKubernetesContainer {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *KubernetesContainerRightsizingRecommendation) GetRecommended() *RightsizingKubernetesContainer {
	if x != nil {
		return x.Recommended
	}
	return nil
}

func (x *KubernetesContainerRightsizingRecommendation) GetMemoryTrimmedMean() *wrappers.DoubleValue {
	if x != nil {
		return x.MemoryTrimmedMean
	}
	return nil
}

func (x *KubernetesContainerRightsizingRecommendation) GetMemoryMax() *wrappers.DoubleValue {
	if x != nil {
		return x.MemoryMax
	}
	return nil
}

func (x *KubernetesContainerRightsizingRecommendation) GetCpuTrimmedMean() *wrappers.DoubleValue {
	if x != nil {
		return x.CpuTrimmedMean
	}
	return nil
}

func (x *KubernetesContainerRightsizingRecommendation) GetCpuMax() *wrappers.DoubleValue {
	if x != nil {
		return x.CpuMax
	}
	return nil
}

func (x *KubernetesContainerRightsizingRecommendation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type KubernetesPodRightsizingRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContainerResizing []*KubernetesContainerRightsizingRecommendation `protobuf:"bytes,2,rep,name=container_resizing,json=containerResizing,proto3" json:"container_resizing,omitempty"`
}

func (x *KubernetesPodRightsizingRecommendation) Reset() {
	*x = KubernetesPodRightsizingRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesPodRightsizingRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesPodRightsizingRecommendation) ProtoMessage() {}

func (x *KubernetesPodRightsizingRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesPodRightsizingRecommendation.ProtoReflect.Descriptor instead.
func (*KubernetesPodRightsizingRecommendation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{18}
}

func (x *KubernetesPodRightsizingRecommendation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesPodRightsizingRecommendation) GetContainerResizing() []*KubernetesContainerRightsizingRecommendation {
	if x != nil {
		return x.ContainerResizing
	}
	return nil
}

type KubernetesDeploymentRightsizingRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContainerResizing    []*KubernetesContainerRightsizingRecommendation    `protobuf:"bytes,2,rep,name=container_resizing,json=containerResizing,proto3" json:"container_resizing,omitempty"`
	PodContainerResizing map[string]*KubernetesPodRightsizingRecommendation `protobuf:"bytes,3,rep,name=pod_container_resizing,json=podContainerResizing,proto3" json:"pod_container_resizing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesDeploymentRightsizingRecommendation) Reset() {
	*x = KubernetesDeploymentRightsizingRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDeploymentRightsizingRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDeploymentRightsizingRecommendation) ProtoMessage() {}

func (x *KubernetesDeploymentRightsizingRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDeploymentRightsizingRecommendation.ProtoReflect.Descriptor instead.
func (*KubernetesDeploymentRightsizingRecommendation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{19}
}

func (x *KubernetesDeploymentRightsizingRecommendation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesDeploymentRightsizingRecommendation) GetContainerResizing() []*KubernetesContainerRightsizingRecommendation {
	if x != nil {
		return x.ContainerResizing
	}
	return nil
}

func (x *KubernetesDeploymentRightsizingRecommendation) GetPodContainerResizing() map[string]*KubernetesPodRightsizingRecommendation {
	if x != nil {
		return x.PodContainerResizing
	}
	return nil
}

type KubernetesStatefulsetRightsizingRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContainerResizing    []*KubernetesContainerRightsizingRecommendation    `protobuf:"bytes,2,rep,name=container_resizing,json=containerResizing,proto3" json:"container_resizing,omitempty"`
	PodContainerResizing map[string]*KubernetesPodRightsizingRecommendation `protobuf:"bytes,3,rep,name=pod_container_resizing,json=podContainerResizing,proto3" json:"pod_container_resizing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesStatefulsetRightsizingRecommendation) Reset() {
	*x = KubernetesStatefulsetRightsizingRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesStatefulsetRightsizingRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesStatefulsetRightsizingRecommendation) ProtoMessage() {}

func (x *KubernetesStatefulsetRightsizingRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesStatefulsetRightsizingRecommendation.ProtoReflect.Descriptor instead.
func (*KubernetesStatefulsetRightsizingRecommendation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{20}
}

func (x *KubernetesStatefulsetRightsizingRecommendation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesStatefulsetRightsizingRecommendation) GetContainerResizing() []*KubernetesContainerRightsizingRecommendation {
	if x != nil {
		return x.ContainerResizing
	}
	return nil
}

func (x *KubernetesStatefulsetRightsizingRecommendation) GetPodContainerResizing() map[string]*KubernetesPodRightsizingRecommendation {
	if x != nil {
		return x.PodContainerResizing
	}
	return nil
}

type KubernetesDaemonsetRightsizingRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContainerResizing    []*KubernetesContainerRightsizingRecommendation    `protobuf:"bytes,2,rep,name=container_resizing,json=containerResizing,proto3" json:"container_resizing,omitempty"`
	PodContainerResizing map[string]*KubernetesPodRightsizingRecommendation `protobuf:"bytes,3,rep,name=pod_container_resizing,json=podContainerResizing,proto3" json:"pod_container_resizing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesDaemonsetRightsizingRecommendation) Reset() {
	*x = KubernetesDaemonsetRightsizingRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDaemonsetRightsizingRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDaemonsetRightsizingRecommendation) ProtoMessage() {}

func (x *KubernetesDaemonsetRightsizingRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDaemonsetRightsizingRecommendation.ProtoReflect.Descriptor instead.
func (*KubernetesDaemonsetRightsizingRecommendation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{21}
}

func (x *KubernetesDaemonsetRightsizingRecommendation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesDaemonsetRightsizingRecommendation) GetContainerResizing() []*KubernetesContainerRightsizingRecommendation {
	if x != nil {
		return x.ContainerResizing
	}
	return nil
}

func (x *KubernetesDaemonsetRightsizingRecommendation) GetPodContainerResizing() map[string]*KubernetesPodRightsizingRecommendation {
	if x != nil {
		return x.PodContainerResizing
	}
	return nil
}

type KubernetesJobRightsizingRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContainerResizing    []*KubernetesContainerRightsizingRecommendation    `protobuf:"bytes,2,rep,name=container_resizing,json=containerResizing,proto3" json:"container_resizing,omitempty"`
	PodContainerResizing map[string]*KubernetesPodRightsizingRecommendation `protobuf:"bytes,3,rep,name=pod_container_resizing,json=podContainerResizing,proto3" json:"pod_container_resizing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesJobRightsizingRecommendation) Reset() {
	*x = KubernetesJobRightsizingRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesJobRightsizingRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesJobRightsizingRecommendation) ProtoMessage() {}

func (x *KubernetesJobRightsizingRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesJobRightsizingRecommendation.ProtoReflect.Descriptor instead.
func (*KubernetesJobRightsizingRecommendation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{22}
}

func (x *KubernetesJobRightsizingRecommendation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesJobRightsizingRecommendation) GetContainerResizing() []*KubernetesContainerRightsizingRecommendation {
	if x != nil {
		return x.ContainerResizing
	}
	return nil
}

func (x *KubernetesJobRightsizingRecommendation) GetPodContainerResizing() map[string]*KubernetesPodRightsizingRecommendation {
	if x != nil {
		return x.PodContainerResizing
	}
	return nil
}

type KubernetesPodOptimizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rightsizing *KubernetesPodRightsizingRecommendation `protobuf:"bytes,1,opt,name=rightsizing,proto3" json:"rightsizing,omitempty"`
}

func (x *KubernetesPodOptimizationResponse) Reset() {
	*x = KubernetesPodOptimizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesPodOptimizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesPodOptimizationResponse) ProtoMessage() {}

func (x *KubernetesPodOptimizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesPodOptimizationResponse.ProtoReflect.Descriptor instead.
func (*KubernetesPodOptimizationResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{23}
}

func (x *KubernetesPodOptimizationResponse) GetRightsizing() *KubernetesPodRightsizingRecommendation {
	if x != nil {
		return x.Rightsizing
	}
	return nil
}

type KubernetesDeploymentOptimizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rightsizing *KubernetesDeploymentRightsizingRecommendation `protobuf:"bytes,1,opt,name=rightsizing,proto3" json:"rightsizing,omitempty"`
}

func (x *KubernetesDeploymentOptimizationResponse) Reset() {
	*x = KubernetesDeploymentOptimizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDeploymentOptimizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDeploymentOptimizationResponse) ProtoMessage() {}

func (x *KubernetesDeploymentOptimizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDeploymentOptimizationResponse.ProtoReflect.Descriptor instead.
func (*KubernetesDeploymentOptimizationResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{24}
}

func (x *KubernetesDeploymentOptimizationResponse) GetRightsizing() *KubernetesDeploymentRightsizingRecommendation {
	if x != nil {
		return x.Rightsizing
	}
	return nil
}

type KubernetesStatefulsetOptimizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rightsizing *KubernetesStatefulsetRightsizingRecommendation `protobuf:"bytes,1,opt,name=rightsizing,proto3" json:"rightsizing,omitempty"`
}

func (x *KubernetesStatefulsetOptimizationResponse) Reset() {
	*x = KubernetesStatefulsetOptimizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesStatefulsetOptimizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesStatefulsetOptimizationResponse) ProtoMessage() {}

func (x *KubernetesStatefulsetOptimizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesStatefulsetOptimizationResponse.ProtoReflect.Descriptor instead.
func (*KubernetesStatefulsetOptimizationResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{25}
}

func (x *KubernetesStatefulsetOptimizationResponse) GetRightsizing() *KubernetesStatefulsetRightsizingRecommendation {
	if x != nil {
		return x.Rightsizing
	}
	return nil
}

type KubernetesDaemonsetOptimizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rightsizing *KubernetesDaemonsetRightsizingRecommendation `protobuf:"bytes,1,opt,name=rightsizing,proto3" json:"rightsizing,omitempty"`
}

func (x *KubernetesDaemonsetOptimizationResponse) Reset() {
	*x = KubernetesDaemonsetOptimizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDaemonsetOptimizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDaemonsetOptimizationResponse) ProtoMessage() {}

func (x *KubernetesDaemonsetOptimizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDaemonsetOptimizationResponse.ProtoReflect.Descriptor instead.
func (*KubernetesDaemonsetOptimizationResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{26}
}

func (x *KubernetesDaemonsetOptimizationResponse) GetRightsizing() *KubernetesDaemonsetRightsizingRecommendation {
	if x != nil {
		return x.Rightsizing
	}
	return nil
}

type KubernetesJobOptimizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rightsizing *KubernetesJobRightsizingRecommendation `protobuf:"bytes,1,opt,name=rightsizing,proto3" json:"rightsizing,omitempty"`
}

func (x *KubernetesJobOptimizationResponse) Reset() {
	*x = KubernetesJobOptimizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesJobOptimizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesJobOptimizationResponse) ProtoMessage() {}

func (x *KubernetesJobOptimizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesJobOptimizationResponse.ProtoReflect.Descriptor instead.
func (*KubernetesJobOptimizationResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{27}
}

func (x *KubernetesJobOptimizationResponse) GetRightsizing() *KubernetesJobRightsizingRecommendation {
	if x != nil {
		return x.Rightsizing
	}
	return nil
}

type KubernetesNodeGetCostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost *wrappers.DoubleValue `protobuf:"bytes,1,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *KubernetesNodeGetCostResponse) Reset() {
	*x = KubernetesNodeGetCostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesNodeGetCostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodeGetCostResponse) ProtoMessage() {}

func (x *KubernetesNodeGetCostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodeGetCostResponse.ProtoReflect.Descriptor instead.
func (*KubernetesNodeGetCostResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{28}
}

func (x *KubernetesNodeGetCostResponse) GetCost() *wrappers.DoubleValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

var File_plugin_proto_server_proto protoreflect.FileDescriptor

var file_plugin_proto_server_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x70,
	0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xde, 0x04, 0x0a, 0x0d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x50, 0x6f, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x04, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x12, 0x6d, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x40, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3f, 0x0a,
	0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x04, 0x0a, 0x15, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75,
	0x6c, 0x73, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd1, 0x04, 0x0a, 0x13, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe1, 0x04, 0x0a, 0x0d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x4a, 0x6f, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x03, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x75,
	0x62, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb6, 0x05, 0x0a,
	0x0e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5a,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x10, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5d,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x78, 0x0a,
	0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x02, 0x0a, 0x1a, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x43, 0x70, 0x75, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x60, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x1a, 0x36, 0x0a, 0x08, 0x43, 0x70, 0x75, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x07, 0x0a, 0x20, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x50, 0x6f, 0x64, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x69, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x1a, 0x41, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x78, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x07,
	0x0a, 0x27, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x70, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x41, 0x0a,
	0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5c, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72,
	0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc9, 0x07, 0x0a, 0x28, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x0e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73,
	0x65, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x7d, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x41, 0x0a, 0x13, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x10,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x0c, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb,
	0x07, 0x0a, 0x26, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x09, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x7b, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x41, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x07, 0x0a,
	0x20, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x4f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a,
	0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x75,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x41, 0x0a, 0x13, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a,
	0x10, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x0c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9f, 0x03, 0x0a, 0x1c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x0e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x41,
	0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xbc, 0x01, 0x0a, 0x1e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xae, 0x04, 0x0a, 0x2c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x62, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x4d,
	0x65, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78,
	0x12, 0x46, 0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x54, 0x72, 0x69,
	0x6d, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x70, 0x75, 0x4d, 0x61, 0x78, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x26, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x50, 0x6f, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x7d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x22,
	0xf8, 0x03, 0x0a, 0x2d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x70, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x70, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x1a, 0x91, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x03, 0x0a, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75,
	0x6c, 0x73, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x7d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x12, 0xa0, 0x01, 0x0a, 0x16, 0x70, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x6a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x70,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x1a, 0x91, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x50, 0x6f, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6, 0x03, 0x0a, 0x2c, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x12, 0x9e, 0x01, 0x0a, 0x16,
	0x70, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x70, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x1a, 0x91, 0x01, 0x0a,
	0x19, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xea, 0x03, 0x0a, 0x26, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4a,
	0x6f, 0x62, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x7d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x12, 0x98,
	0x01, 0x0a, 0x16, 0x70, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x62, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4a, 0x6f, 0x62,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x70, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x1a, 0x91, 0x01, 0x0a, 0x19, 0x50, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x01,
	0x0a, 0x21, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x22,
	0x9d, 0x01, 0x0a, 0x28, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0b,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x22,
	0x9f, 0x01, 0x0a, 0x29, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a,
	0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x22, 0x9b, 0x01, 0x0a, 0x27, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a,
	0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x22,
	0x8f, 0x01, 0x0a, 0x21, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4a, 0x6f,
	0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x22, 0x51, 0x0a, 0x1d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x32, 0xab, 0x08, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x19, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x50, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb9, 0x01, 0x0a,
	0x20, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x21, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x1f, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xa4, 0x01, 0x0a, 0x19, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4a,
	0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x3e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2d, 0x69, 0x6f, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_proto_server_proto_rawDescOnce sync.Once
	file_plugin_proto_server_proto_rawDescData = file_plugin_proto_server_proto_rawDesc
)

func file_plugin_proto_server_proto_rawDescGZIP() []byte {
	file_plugin_proto_server_proto_rawDescOnce.Do(func() {
		file_plugin_proto_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_proto_server_proto_rawDescData)
	})
	return file_plugin_proto_server_proto_rawDescData
}

var file_plugin_proto_server_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_plugin_proto_server_proto_goTypes = []interface{}{
	(*KubernetesContainer)(nil),                            // 0: pluginkubernetes.optimization.v1.KubernetesContainer
	(*KubernetesPod)(nil),                                  // 1: pluginkubernetes.optimization.v1.KubernetesPod
	(*KubernetesDeployment)(nil),                           // 2: pluginkubernetes.optimization.v1.KubernetesDeployment
	(*KubernetesStatefulset)(nil),                          // 3: pluginkubernetes.optimization.v1.KubernetesStatefulset
	(*KubernetesDaemonset)(nil),                            // 4: pluginkubernetes.optimization.v1.KubernetesDaemonset
	(*KubernetesJob)(nil),                                  // 5: pluginkubernetes.optimization.v1.KubernetesJob
	(*NodeSystemInfo)(nil),                                 // 6: pluginkubernetes.optimization.v1.NodeSystemInfo
	(*KubernetesNode)(nil),                                 // 7: pluginkubernetes.optimization.v1.KubernetesNode
	(*KubernetesPodMetrics)(nil),                           // 8: pluginkubernetes.optimization.v1.KubernetesPodMetrics
	(*KubernetesContainerMetrics)(nil),                     // 9: pluginkubernetes.optimization.v1.KubernetesContainerMetrics
	(*KubernetesPodOptimizationRequest)(nil),               // 10: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest
	(*KubernetesDeploymentOptimizationRequest)(nil),        // 11: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest
	(*KubernetesStatefulsetOptimizationRequest)(nil),       // 12: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest
	(*KubernetesDaemonsetOptimizationRequest)(nil),         // 13: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest
	(*KubernetesJobOptimizationRequest)(nil),               // 14: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest
	(*KubernetesNodeGetCostRequest)(nil),                   // 15: pluginkubernetes.optimization.v1.KubernetesNodeGetCostRequest
	(*RightsizingKubernetesContainer)(nil),                 // 16: pluginkubernetes.optimization.v1.RightsizingKubernetesContainer
	(*KubernetesContainerRightsizingRecommendation)(nil),   // 17: pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation
	(*KubernetesPodRightsizingRecommendation)(nil),         // 18: pluginkubernetes.optimization.v1.KubernetesPodRightsizingRecommendation
	(*KubernetesDeploymentRightsizingRecommendation)(nil),  // 19: pluginkubernetes.optimization.v1.KubernetesDeploymentRightsizingRecommendation
	(*KubernetesStatefulsetRightsizingRecommendation)(nil), // 20: pluginkubernetes.optimization.v1.KubernetesStatefulsetRightsizingRecommendation
	(*KubernetesDaemonsetRightsizingRecommendation)(nil),   // 21: pluginkubernetes.optimization.v1.KubernetesDaemonsetRightsizingRecommendation
	(*KubernetesJobRightsizingRecommendation)(nil),         // 22: pluginkubernetes.optimization.v1.KubernetesJobRightsizingRecommendation
	(*KubernetesPodOptimizationResponse)(nil),              // 23: pluginkubernetes.optimization.v1.KubernetesPodOptimizationResponse
	(*KubernetesDeploymentOptimizationResponse)(nil),       // 24: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationResponse
	(*KubernetesStatefulsetOptimizationResponse)(nil),      // 25: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationResponse
	(*KubernetesDaemonsetOptimizationResponse)(nil),        // 26: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationResponse
	(*KubernetesJobOptimizationResponse)(nil),              // 27: pluginkubernetes.optimization.v1.KubernetesJobOptimizationResponse
	(*KubernetesNodeGetCostResponse)(nil),                  // 28: pluginkubernetes.optimization.v1.KubernetesNodeGetCostResponse
	nil,                                                    // 29: pluginkubernetes.optimization.v1.KubernetesPod.NodeSelectorEntry
	nil,                                                    // 30: pluginkubernetes.optimization.v1.KubernetesPod.LabelsEntry
	nil,                                                    // 31: pluginkubernetes.optimization.v1.KubernetesDeployment.NodeSelectorEntry
	nil,                                                    // 32: pluginkubernetes.optimization.v1.KubernetesDeployment.LabelsEntry
	nil,                                                    // 33: pluginkubernetes.optimization.v1.KubernetesStatefulset.NodeSelectorEntry
	nil,                                                    // 34: pluginkubernetes.optimization.v1.KubernetesStatefulset.LabelsEntry
	nil,                                                    // 35: pluginkubernetes.optimization.v1.KubernetesDaemonset.NodeSelectorEntry
	nil,                                                    // 36: pluginkubernetes.optimization.v1.KubernetesDaemonset.LabelsEntry
	nil,                                                    // 37: pluginkubernetes.optimization.v1.KubernetesJob.NodeSelectorEntry
	nil,                                                    // 38: pluginkubernetes.optimization.v1.KubernetesJob.LabelsEntry
	nil,                                                    // 39: pluginkubernetes.optimization.v1.KubernetesNode.AnnotationsEntry
	nil,                                                    // 40: pluginkubernetes.optimization.v1.KubernetesNode.LabelsEntry
	nil,                                                    // 41: pluginkubernetes.optimization.v1.KubernetesNode.CapacityEntry
	nil,                                                    // 42: pluginkubernetes.optimization.v1.KubernetesPodMetrics.MetricsEntry
	nil,                                                    // 43: pluginkubernetes.optimization.v1.KubernetesContainerMetrics.CpuEntry
	nil,                                                    // 44: pluginkubernetes.optimization.v1.KubernetesContainerMetrics.MemoryEntry
	nil,                                                    // 45: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.IdentificationEntry
	nil,                                                    // 46: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.PreferencesEntry
	nil,                                                    // 47: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.MetricsEntry
	nil,                                                    // 48: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.IdentificationEntry
	nil,                                                    // 49: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.PreferencesEntry
	nil,                                                    // 50: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.MetricsEntry
	nil,                                                    // 51: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.IdentificationEntry
	nil,                                                    // 52: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.PreferencesEntry
	nil,                                                    // 53: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.MetricsEntry
	nil,                                                    // 54: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.IdentificationEntry
	nil,                                                    // 55: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.PreferencesEntry
	nil,                                                    // 56: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.MetricsEntry
	nil,                                                    // 57: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.IdentificationEntry
	nil,                                                    // 58: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.PreferencesEntry
	nil,                                                    // 59: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.MetricsEntry
	nil,                                                    // 60: pluginkubernetes.optimization.v1.KubernetesNodeGetCostRequest.IdentificationEntry
	nil,                                                    // 61: pluginkubernetes.optimization.v1.KubernetesDeploymentRightsizingRecommendation.PodContainerResizingEntry
	nil,                                                    // 62: pluginkubernetes.optimization.v1.KubernetesStatefulsetRightsizingRecommendation.PodContainerResizingEntry
	nil,                                                    // 63: pluginkubernetes.optimization.v1.KubernetesDaemonsetRightsizingRecommendation.PodContainerResizingEntry
	nil,                                                    // 64: pluginkubernetes.optimization.v1.KubernetesJobRightsizingRecommendation.PodContainerResizingEntry
	(*v1.Affinity)(nil),                                    // 65: k8s.io.api.core.v1.Affinity
	(*v1.Toleration)(nil),                                  // 66: k8s.io.api.core.v1.Toleration
	(*v1.Taint)(nil),                                       // 67: k8s.io.api.core.v1.Taint
	(*wrappers.StringValue)(nil),                           // 68: google.protobuf.StringValue
	(*wrappers.DoubleValue)(nil),                           // 69: google.protobuf.DoubleValue
}
var file_plugin_proto_server_proto_depIdxs = []int32{
	0,   // 0: pluginkubernetes.optimization.v1.KubernetesPod.containers:type_name -> pluginkubernetes.optimization.v1.KubernetesContainer
	65,  // 1: pluginkubernetes.optimization.v1.KubernetesPod.affinity:type_name -> k8s.io.api.core.v1.Affinity
	29,  // 2: pluginkubernetes.optimization.v1.KubernetesPod.node_selector:type_name -> pluginkubernetes.optimization.v1.KubernetesPod.NodeSelectorEntry
	66,  // 3: pluginkubernetes.optimization.v1.KubernetesPod.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	30,  // 4: pluginkubernetes.optimization.v1.KubernetesPod.labels:type_name -> pluginkubernetes.optimization.v1.KubernetesPod.LabelsEntry
	0,   // 5: pluginkubernetes.optimization.v1.KubernetesDeployment.containers:type_name -> pluginkubernetes.optimization.v1.KubernetesContainer
	65,  // 6: pluginkubernetes.optimization.v1.KubernetesDeployment.affinity:type_name -> k8s.io.api.core.v1.Affinity
	31,  // 7: pluginkubernetes.optimization.v1.KubernetesDeployment.node_selector:type_name -> pluginkubernetes.optimization.v1.KubernetesDeployment.NodeSelectorEntry
	66,  // 8: pluginkubernetes.optimization.v1.KubernetesDeployment.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	32,  // 9: pluginkubernetes.optimization.v1.KubernetesDeployment.labels:type_name -> pluginkubernetes.optimization.v1.KubernetesDeployment.LabelsEntry
	0,   // 10: pluginkubernetes.optimization.v1.KubernetesStatefulset.containers:type_name -> pluginkubernetes.optimization.v1.KubernetesContainer
	65,  // 11: pluginkubernetes.optimization.v1.KubernetesStatefulset.affinity:type_name -> k8s.io.api.core.v1.Affinity
	33,  // 12: pluginkubernetes.optimization.v1.KubernetesStatefulset.node_selector:type_name -> pluginkubernetes.optimization.v1.KubernetesStatefulset.NodeSelectorEntry
	66,  // 13: pluginkubernetes.optimization.v1.KubernetesStatefulset.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	34,  // 14: pluginkubernetes.optimization.v1.KubernetesStatefulset.labels:type_name -> pluginkubernetes.optimization.v1.KubernetesStatefulset.LabelsEntry
	0,   // 15: pluginkubernetes.optimization.v1.KubernetesDaemonset.containers:type_name -> pluginkubernetes.optimization.v1.KubernetesContainer
	65,  // 16: pluginkubernetes.optimization.v1.KubernetesDaemonset.affinity:type_name -> k8s.io.api.core.v1.Affinity
	35,  // 17: pluginkubernetes.optimization.v1.KubernetesDaemonset.node_selector:type_name -> pluginkubernetes.optimization.v1.KubernetesDaemonset.NodeSelectorEntry
	66,  // 18: pluginkubernetes.optimization.v1.KubernetesDaemonset.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	36,  // 19: pluginkubernetes.optimization.v1.KubernetesDaemonset.labels:type_name -> pluginkubernetes.optimization.v1.KubernetesDaemonset.LabelsEntry
	0,   // 20: pluginkubernetes.optimization.v1.KubernetesJob.containers:type_name -> pluginkubernetes.optimization.v1.KubernetesContainer
	65,  // 21: pluginkubernetes.optimization.v1.KubernetesJob.affinity:type_name -> k8s.io.api.core.v1.Affinity
	37,  // 22: pluginkubernetes.optimization.v1.KubernetesJob.node_selector:type_name -> pluginkubernetes.optimization.v1.KubernetesJob.NodeSelectorEntry
	66,  // 23: pluginkubernetes.optimization.v1.KubernetesJob.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	38,  // 24: pluginkubernetes.optimization.v1.KubernetesJob.labels:type_name -> pluginkubernetes.optimization.v1.KubernetesJob.LabelsEntry
	39,  // 25: pluginkubernetes.optimization.v1.KubernetesNode.annotations:type_name -> pluginkubernetes.optimization.v1.KubernetesNode.AnnotationsEntry
	40,  // 26: pluginkubernetes.optimization.v1.KubernetesNode.labels:type_name -> pluginkubernetes.optimization.v1.KubernetesNode.LabelsEntry
	41,  // 27: pluginkubernetes.optimization.v1.KubernetesNode.capacity:type_name -> pluginkubernetes.optimization.v1.KubernetesNode.CapacityEntry
	6,   // 28: pluginkubernetes.optimization.v1.KubernetesNode.node_system_info:type_name -> pluginkubernetes.optimization.v1.NodeSystemInfo
	67,  // 29: pluginkubernetes.optimization.v1.KubernetesNode.taints:type_name -> k8s.io.api.core.v1.Taint
	42,  // 30: pluginkubernetes.optimization.v1.KubernetesPodMetrics.metrics:type_name -> pluginkubernetes.optimization.v1.KubernetesPodMetrics.MetricsEntry
	43,  // 31: pluginkubernetes.optimization.v1.KubernetesContainerMetrics.cpu:type_name -> pluginkubernetes.optimization.v1.KubernetesContainerMetrics.CpuEntry
	44,  // 32: pluginkubernetes.optimization.v1.KubernetesContainerMetrics.memory:type_name -> pluginkubernetes.optimization.v1.KubernetesContainerMetrics.MemoryEntry
	68,  // 33: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.request_id:type_name -> google.protobuf.StringValue
	68,  // 34: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.cli_version:type_name -> google.protobuf.StringValue
	45,  // 35: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.identification:type_name -> pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.IdentificationEntry
	1,   // 36: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.pod:type_name -> pluginkubernetes.optimization.v1.KubernetesPod
	46,  // 37: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.preferences:type_name -> pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.PreferencesEntry
	47,  // 38: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.metrics:type_name -> pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.MetricsEntry
	68,  // 39: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.request_id:type_name -> google.protobuf.StringValue
	68,  // 40: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.cli_version:type_name -> google.protobuf.StringValue
	48,  // 41: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.identification:type_name -> pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.IdentificationEntry
	2,   // 42: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.deployment:type_name -> pluginkubernetes.optimization.v1.KubernetesDeployment
	49,  // 43: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.preferences:type_name -> pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.PreferencesEntry
	50,  // 44: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.metrics:type_name -> pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.MetricsEntry
	68,  // 45: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.request_id:type_name -> google.protobuf.StringValue
	68,  // 46: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.cli_version:type_name -> google.protobuf.StringValue
	51,  // 47: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.identification:type_name -> pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.IdentificationEntry
	3,   // 48: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.statefulset:type_name -> pluginkubernetes.optimization.v1.KubernetesStatefulset
	52,  // 49: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.preferences:type_name -> pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.PreferencesEntry
	53,  // 50: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.metrics:type_name -> pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.MetricsEntry
	68,  // 51: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.request_id:type_name -> google.protobuf.StringValue
	68,  // 52: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.cli_version:type_name -> google.protobuf.StringValue
	54,  // 53: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.identification:type_name -> pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.IdentificationEntry
	4,   // 54: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.daemonset:type_name -> pluginkubernetes.optimization.v1.KubernetesDaemonset
	55,  // 55: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.preferences:type_name -> pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.PreferencesEntry
	56,  // 56: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.metrics:type_name -> pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.MetricsEntry
	68,  // 57: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.request_id:type_name -> google.protobuf.StringValue
	68,  // 58: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.cli_version:type_name -> google.protobuf.StringValue
	57,  // 59: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.identification:type_name -> pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.IdentificationEntry
	5,   // 60: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.job:type_name -> pluginkubernetes.optimization.v1.KubernetesJob
	58,  // 61: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.preferences:type_name -> pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.PreferencesEntry
	59,  // 62: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.metrics:type_name -> pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.MetricsEntry
	68,  // 63: pluginkubernetes.optimization.v1.KubernetesNodeGetCostRequest.request_id:type_name -> google.protobuf.StringValue
	68,  // 64: pluginkubernetes.optimization.v1.KubernetesNodeGetCostRequest.cli_version:type_name -> google.protobuf.StringValue
	60,  // 65: pluginkubernetes.optimization.v1.KubernetesNodeGetCostRequest.identification:type_name -> pluginkubernetes.optimization.v1.KubernetesNodeGetCostRequest.IdentificationEntry
	7,   // 66: pluginkubernetes.optimization.v1.KubernetesNodeGetCostRequest.node:type_name -> pluginkubernetes.optimization.v1.KubernetesNode
	16,  // 67: pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation.current:type_name -> pluginkubernetes.optimization.v1.RightsizingKubernetesContainer
	16,  // 68: pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation.recommended:type_name -> pluginkubernetes.optimization.v1.RightsizingKubernetesContainer
	69,  // 69: pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation.memory_trimmed_mean:type_name -> google.protobuf.DoubleValue
	69,  // 70: pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation.memory_max:type_name -> google.protobuf.DoubleValue
	69,  // 71: pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation.cpu_trimmed_mean:type_name -> google.protobuf.DoubleValue
	69,  // 72: pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation.cpu_max:type_name -> google.protobuf.DoubleValue
	17,  // 73: pluginkubernetes.optimization.v1.KubernetesPodRightsizingRecommendation.container_resizing:type_name -> pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation
	17,  // 74: pluginkubernetes.optimization.v1.KubernetesDeploymentRightsizingRecommendation.container_resizing:type_name -> pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation
	61,  // 75: pluginkubernetes.optimization.v1.KubernetesDeploymentRightsizingRecommendation.pod_container_resizing:type_name -> pluginkubernetes.optimization.v1.KubernetesDeploymentRightsizingRecommendation.PodContainerResizingEntry
	17,  // 76: pluginkubernetes.optimization.v1.KubernetesStatefulsetRightsizingRecommendation.container_resizing:type_name -> pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation
	62,  // 77: pluginkubernetes.optimization.v1.KubernetesStatefulsetRightsizingRecommendation.pod_container_resizing:type_name -> pluginkubernetes.optimization.v1.KubernetesStatefulsetRightsizingRecommendation.PodContainerResizingEntry
	17,  // 78: pluginkubernetes.optimization.v1.KubernetesDaemonsetRightsizingRecommendation.container_resizing:type_name -> pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation
	63,  // 79: pluginkubernetes.optimization.v1.KubernetesDaemonsetRightsizingRecommendation.pod_container_resizing:type_name -> pluginkubernetes.optimization.v1.KubernetesDaemonsetRightsizingRecommendation.PodContainerResizingEntry
	17,  // 80: pluginkubernetes.optimization.v1.KubernetesJobRightsizingRecommendation.container_resizing:type_name -> pluginkubernetes.optimization.v1.KubernetesContainerRightsizingRecommendation
	64,  // 81: pluginkubernetes.optimization.v1.KubernetesJobRightsizingRecommendation.pod_container_resizing:type_name -> pluginkubernetes.optimization.v1.KubernetesJobRightsizingRecommendation.PodContainerResizingEntry
	18,  // 82: pluginkubernetes.optimization.v1.KubernetesPodOptimizationResponse.rightsizing:type_name -> pluginkubernetes.optimization.v1.KubernetesPodRightsizingRecommendation
	19,  // 83: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationResponse.rightsizing:type_name -> pluginkubernetes.optimization.v1.KubernetesDeploymentRightsizingRecommendation
	20,  // 84: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationResponse.rightsizing:type_name -> pluginkubernetes.optimization.v1.KubernetesStatefulsetRightsizingRecommendation
	21,  // 85: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationResponse.rightsizing:type_name -> pluginkubernetes.optimization.v1.KubernetesDaemonsetRightsizingRecommendation
	22,  // 86: pluginkubernetes.optimization.v1.KubernetesJobOptimizationResponse.rightsizing:type_name -> pluginkubernetes.optimization.v1.KubernetesJobRightsizingRecommendation
	69,  // 87: pluginkubernetes.optimization.v1.KubernetesNodeGetCostResponse.cost:type_name -> google.protobuf.DoubleValue
	9,   // 88: pluginkubernetes.optimization.v1.KubernetesPodMetrics.MetricsEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesContainerMetrics
	68,  // 89: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.PreferencesEntry.value:type_name -> google.protobuf.StringValue
	9,   // 90: pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest.MetricsEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesContainerMetrics
	68,  // 91: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.PreferencesEntry.value:type_name -> google.protobuf.StringValue
	8,   // 92: pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest.MetricsEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesPodMetrics
	68,  // 93: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.PreferencesEntry.value:type_name -> google.protobuf.StringValue
	8,   // 94: pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest.MetricsEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesPodMetrics
	68,  // 95: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.PreferencesEntry.value:type_name -> google.protobuf.StringValue
	8,   // 96: pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest.MetricsEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesPodMetrics
	68,  // 97: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.PreferencesEntry.value:type_name -> google.protobuf.StringValue
	8,   // 98: pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest.MetricsEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesPodMetrics
	18,  // 99: pluginkubernetes.optimization.v1.KubernetesDeploymentRightsizingRecommendation.PodContainerResizingEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesPodRightsizingRecommendation
	18,  // 100: pluginkubernetes.optimization.v1.KubernetesStatefulsetRightsizingRecommendation.PodContainerResizingEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesPodRightsizingRecommendation
	18,  // 101: pluginkubernetes.optimization.v1.KubernetesDaemonsetRightsizingRecommendation.PodContainerResizingEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesPodRightsizingRecommendation
	18,  // 102: pluginkubernetes.optimization.v1.KubernetesJobRightsizingRecommendation.PodContainerResizingEntry.value:type_name -> pluginkubernetes.optimization.v1.KubernetesPodRightsizingRecommendation
	10,  // 103: pluginkubernetes.optimization.v1.Optimization.KubernetesPodOptimization:input_type -> pluginkubernetes.optimization.v1.KubernetesPodOptimizationRequest
	11,  // 104: pluginkubernetes.optimization.v1.Optimization.KubernetesDeploymentOptimization:input_type -> pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationRequest
	12,  // 105: pluginkubernetes.optimization.v1.Optimization.KubernetesStatefulsetOptimization:input_type -> pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationRequest
	13,  // 106: pluginkubernetes.optimization.v1.Optimization.KubernetesDaemonsetOptimization:input_type -> pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationRequest
	14,  // 107: pluginkubernetes.optimization.v1.Optimization.KubernetesJobOptimization:input_type -> pluginkubernetes.optimization.v1.KubernetesJobOptimizationRequest
	15,  // 108: pluginkubernetes.optimization.v1.Optimization.KubernetesNodeGetCost:input_type -> pluginkubernetes.optimization.v1.KubernetesNodeGetCostRequest
	23,  // 109: pluginkubernetes.optimization.v1.Optimization.KubernetesPodOptimization:output_type -> pluginkubernetes.optimization.v1.KubernetesPodOptimizationResponse
	24,  // 110: pluginkubernetes.optimization.v1.Optimization.KubernetesDeploymentOptimization:output_type -> pluginkubernetes.optimization.v1.KubernetesDeploymentOptimizationResponse
	25,  // 111: pluginkubernetes.optimization.v1.Optimization.KubernetesStatefulsetOptimization:output_type -> pluginkubernetes.optimization.v1.KubernetesStatefulsetOptimizationResponse
	26,  // 112: pluginkubernetes.optimization.v1.Optimization.KubernetesDaemonsetOptimization:output_type -> pluginkubernetes.optimization.v1.KubernetesDaemonsetOptimizationResponse
	27,  // 113: pluginkubernetes.optimization.v1.Optimization.KubernetesJobOptimization:output_type -> pluginkubernetes.optimization.v1.KubernetesJobOptimizationResponse
	28,  // 114: pluginkubernetes.optimization.v1.Optimization.KubernetesNodeGetCost:output_type -> pluginkubernetes.optimization.v1.KubernetesNodeGetCostResponse
	109, // [109:115] is the sub-list for method output_type
	103, // [103:109] is the sub-list for method input_type
	103, // [103:103] is the sub-list for extension type_name
	103, // [103:103] is the sub-list for extension extendee
	0,   // [0:103] is the sub-list for field type_name
}

func init() { file_plugin_proto_server_proto_init() }
func file_plugin_proto_server_proto_init() {
	if File_plugin_proto_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugin_proto_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesPod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesStatefulset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesDaemonset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesPodMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesContainerMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesPodOptimizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesDeploymentOptimizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesStatefulsetOptimizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesDaemonsetOptimizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesJobOptimizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesNodeGetCostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightsizingKubernetesContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesContainerRightsizingRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesPodRightsizingRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesDeploymentRightsizingRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesStatefulsetRightsizingRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesDaemonsetRightsizingRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesJobRightsizingRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesPodOptimizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesDeploymentOptimizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesStatefulsetOptimizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesDaemonsetOptimizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesJobOptimizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesNodeGetCostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_proto_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_proto_server_proto_goTypes,
		DependencyIndexes: file_plugin_proto_server_proto_depIdxs,
		MessageInfos:      file_plugin_proto_server_proto_msgTypes,
	}.Build()
	File_plugin_proto_server_proto = out.File
	file_plugin_proto_server_proto_rawDesc = nil
	file_plugin_proto_server_proto_goTypes = nil
	file_plugin_proto_server_proto_depIdxs = nil
}
